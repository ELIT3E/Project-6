const ee = `<svg width="45px" height="53px" viewBox="0 0 45 53" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="storyblok-logo-kit" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="storyblok-partner-logo" transform="translate(-59.000000, -169.000000)" fill-rule="nonzero">
            <g id="storyblok-symbol" transform="translate(59.000000, 169.000000)">
                <path d="M2.32662261,0 C1.03405449,0 0,1.0331384 0,2.27290448 L0,42.8752437 C0,44.1150097 1.03405449,44.8898635 2.27491989,44.8898635 L8.27243596,44.8898635 L8.27243596,53 L15.7176283,44.9415205 L42.9132615,44.9415205 C44.1541269,44.9415205 44.9296678,44.1666667 44.9296678,42.8752437 L44.9296678,2.3245614 C44.9296678,1.08479532 44.2058296,0 42.9132615,0 L2.32662261,0 Z" id="Shape-path-Copy" fill="#0AB3AF"></path>
                <path d="M29.1016723,8.11483254 C30.1351059,8.11483254 31.0135245,8.32132604 31.8402713,8.78593643 C32.6153465,9.19892344 33.33875,9.76678059 33.9071385,10.4378845 C35.0647615,11.8482391 35.6869248,13.6215753 35.6639755,15.445352 C35.6639755,16.7875598 35.3022738,18.0781442 34.630542,19.3171053 C33.9341248,20.5632996 32.8438147,21.5436614 31.5302412,22.1047676 C33.183735,22.569378 34.4755269,23.395352 35.4572888,24.5826897 C36.387379,25.8216507 36.8524241,27.4219754 36.8524241,29.4352871 C36.8524241,30.7258715 36.6168825,31.8756998 36.1290206,32.7391832 C35.6123039,33.668404 34.8372287,34.4427546 33.9071385,35.0106118 C32.9253766,35.6300923 31.8402713,36.1979494 30.600151,36.4560663 C29.3600307,36.7658066 28.0165671,37.0239234 26.6214318,37.0239234 L8.32965751,37.0239234 L8.32965751,8.11483254 L29.1016723,8.11483254 Z M26.1340815,24.271851 L15.77813,24.271851 L15.77813,29.1552028 L25.8851404,29.1552028 C26.4825991,29.1552028 27.0302696,28.9110352 27.4783637,28.5203671 C27.8766695,28.1296989 28.1256107,27.5436967 28.1256107,26.811194 C28.140051,26.1827412 27.948041,25.5663945 27.5779401,25.0531873 C27.1796343,24.5648522 26.7315403,24.271851 26.1340815,24.271851 Z M25.2876816,14.5051475 L15.77813,14.5051475 L15.77813,18.9001641 L25.0885287,18.9001641 C25.586411,18.9001641 26.0842933,18.6559965 26.4825991,18.3629954 C26.9306932,18.0699943 27.1298461,17.4351586 27.1298461,16.6049888 C27.1298461,15.872486 26.9306932,15.3353173 26.5821756,14.9934827 C26.233658,14.7004816 25.7855639,14.5051475 25.2876816,14.5051475 Z" id="Combined-Shape-Copy-3" fill="#FFFFFF"></path>
            </g>
        </g>
    </g>
</svg>`, te = /[\p{Lu}]/u, oe = /[\p{Ll}]/u, M = /^[\p{Lu}](?![\p{Lu}])/gu, G = /([\p{Alpha}\p{N}_]|$)/u, O = /[_.\- ]+/, re = new RegExp("^" + O.source), N = new RegExp(O.source + G.source, "gu"), j = new RegExp("\\d+" + G.source, "gu"), se = (e, t, s, n) => {
  let l = !1, r = !1, b = !1, p = !1;
  for (let i = 0; i < e.length; i++) {
    const u = e[i];
    p = i > 2 ? e[i - 3] === "-" : !0, l && te.test(u) ? (e = e.slice(0, i) + "-" + e.slice(i), l = !1, b = r, r = !0, i++) : r && b && oe.test(u) && (!p || n) ? (e = e.slice(0, i - 1) + "-" + e.slice(i - 1), b = r, r = !1, l = !0) : (l = t(u) === u && s(u) !== u, b = r, r = s(u) === u && t(u) !== u);
  }
  return e;
}, ne = (e, t) => (M.lastIndex = 0, e.replaceAll(M, (s) => t(s))), le = (e, t) => (N.lastIndex = 0, j.lastIndex = 0, e.replaceAll(j, (s, n, l) => ["_", "-"].includes(e.charAt(l + s.length)) ? s : t(s)).replaceAll(N, (s, n) => t(n)));
function ae(e, t) {
  if (!(typeof e == "string" || Array.isArray(e)))
    throw new TypeError("Expected the input to be `string | string[]`");
  if (t = {
    pascalCase: !1,
    preserveConsecutiveUppercase: !1,
    ...t
  }, Array.isArray(e) ? e = e.map((r) => r.trim()).filter((r) => r.length).join("-") : e = e.trim(), e.length === 0)
    return "";
  const s = t.locale === !1 ? (r) => r.toLowerCase() : (r) => r.toLocaleLowerCase(t.locale), n = t.locale === !1 ? (r) => r.toUpperCase() : (r) => r.toLocaleUpperCase(t.locale);
  return e.length === 1 ? O.test(e) ? "" : t.pascalCase ? n(e) : s(e) : (e !== s(e) && (e = se(e, s, n, t.preserveConsecutiveUppercase)), e = e.replace(re, ""), e = t.preserveConsecutiveUppercase ? ne(e, s) : s(e), t.pascalCase && (e = n(e.charAt(0)) + e.slice(1)), le(e, n));
}
function P(e) {
  return ae(e);
}
function ie(e, t = {}, s, n) {
  const l = "virtual:storyblok-components", r = `\0${l}`;
  return {
    name: "vite-plugin-storyblok-components",
    async resolveId(b) {
      if (b === l)
        return r;
    },
    async load(b) {
      if (b === r) {
        const p = [], i = [];
        for await (const [f, E] of Object.entries(t)) {
          const L = await this.resolve(
            `/${e}/${E}.astro`
          );
          if (L)
            p.push(`import ${P(f)} from "${L.id}"`);
          else if (s)
            i.push(f);
          else
            throw new Error(
              `Component could not be found for blok "${f}"! Does "${`/${e}/${E}`}.astro" exist?`
            );
        }
        let u = "";
        if (s)
          if (u = ",FallbackComponent", n) {
            const f = await this.resolve(
              `/${e}/${n}.astro`
            );
            if (!f)
              throw new Error(
                `Custom fallback component could not be found. Does "${`/${e}/${n}`}.astro" exist?`
              );
            p.push(
              `import FallbackComponent from "${f.id}"`
            );
          } else
            p.push(
              "import FallbackComponent from '@storyblok/astro/FallbackComponent.astro'"
            );
        if (Object.values(t).length)
          return `${p.join(";")};export default {${Object.keys(t).filter((f) => !i.includes(f)).map((f) => P(f)).join(",")}${u}}`;
        if (s)
          return `${p[0]}; export default {${u.replace(",", "")}}`;
        throw new Error(
          `Currently, no Storyblok components are registered in astro.config.mjs.
Please register your components or enable the fallback component.
Detailed information can be found here: https://github.com/storyblok/storyblok-astro`
        );
      }
    }
  };
}
function ce(e, t, s) {
  const n = "virtual:storyblok-init", l = `\0${n}`;
  return {
    name: "vite-plugin-storyblok-init",
    async resolveId(r) {
      if (r === n)
        return l;
    },
    async load(r) {
      if (r === l)
        return `
          import { storyblokInit, apiPlugin } from "@storyblok/js";
          const { storyblokApi } = storyblokInit({
            accessToken: "${e}",
            use: ${t ? "[]" : "[apiPlugin]"},
            apiOptions: ${JSON.stringify(s)},
          });
          export const storyblokApiInstance = storyblokApi;  
        `;
    }
  };
}
function de(e) {
  const t = "virtual:storyblok-options", s = `\0${t}`;
  return {
    name: "vite-plugin-storyblok-options",
    async resolveId(n) {
      if (n === t)
        return s;
    },
    async load(n) {
      if (n === s)
        return `export default ${JSON.stringify(e)}`;
    }
  };
}
function Ce() {
  if (!(globalThis != null && globalThis.storyblokApiInstance))
    throw new Error("storyblokApiInstance has not been initialized correctly");
  return globalThis.storyblokApiInstance;
}
async function Ee(e) {
  let t = null;
  return e && e.locals._storyblok_preview_data && (t = e.locals._storyblok_preview_data), t;
}
function ue(e) {
  return typeof e == "object" ? `const storyblokInstance = new StoryblokBridge(${JSON.stringify(e)});` : "const storyblokInstance = new StoryblokBridge();";
}
function Le(e) {
  const t = {
    useCustomApi: !1,
    bridge: !0,
    componentsDir: "src",
    enableFallbackComponent: !1,
    livePreview: !1,
    ...e
  }, s = ue(t.bridge);
  return {
    name: "@storyblok/astro",
    hooks: {
      "astro:config:setup": ({
        injectScript: n,
        updateConfig: l,
        addDevToolbarApp: r,
        addMiddleware: b,
        config: p
      }) => {
        if (l({
          vite: {
            plugins: [
              ce(
                t.accessToken,
                t.useCustomApi,
                t.apiOptions
              ),
              ie(
                t.componentsDir,
                t.components,
                t.enableFallbackComponent,
                t.customFallbackComponent
              ),
              de(t)
            ]
          }
        }), t.livePreview && (p == null ? void 0 : p.output) !== "server")
          throw new Error(
            "To utilize the Astro Storyblok Live feature, Astro must be configured to run in SSR mode. Please disable this feature or switch Astro to SSR mode."
          );
        n(
          "page-ssr",
          `
            import { storyblokApiInstance } from "virtual:storyblok-init";
            globalThis.storyblokApiInstance = storyblokApiInstance;
            `
        ), t.bridge && !t.livePreview && n(
          "page",
          `import { loadStoryblokBridge } from "@storyblok/astro";
              loadStoryblokBridge().then(() => {
                const { StoryblokBridge, location } = window;
                ${s}
                storyblokInstance.on(["published", "change"], (event) => {
                  if (!event.slugChanged) {
                    location.reload(true);
                  } 
                });
              });
              `
        ), t.livePreview && (n(
          "page",
          `import { loadStoryblokBridge, handleStoryblokMessage } from "@storyblok/astro";
                loadStoryblokBridge().then(() => {
                  const { StoryblokBridge, location } = window;
                  ${s}
                  storyblokInstance.on(["published", "change", "input"], handleStoryblokMessage);
                });
              `
        ), b({
          entrypoint: "@storyblok/astro/middleware.ts",
          order: "pre"
        })), r({
          id: "storyblok",
          name: "Storyblok",
          icon: ee,
          entrypoint: "@storyblok/astro/toolbarApp.ts"
        });
      }
    }
  };
}
let D;
async function $e(e) {
  const { action: t, story: s } = e || {};
  if (t === "input" && s) {
    const n = async () => {
      const r = await be(s), b = document.body;
      if (r.outerHTML === b.outerHTML)
        return;
      const p = document.querySelector('[data-blok-focused="true"]');
      pe(b, r, p), document.dispatchEvent(new Event("storyblok-live-preview-updated"));
    };
    clearTimeout(D), D = setTimeout(n, 500);
  }
  ["published", "change"].includes(e == null ? void 0 : e.action) && location.reload();
}
function pe(e, t, s) {
  if (s) {
    const n = s.getAttribute("data-blok-uid"), l = t.querySelector(
      `[data-blok-uid="${n}"]`
    );
    l && (l.setAttribute("data-blok-focused", "true"), s.replaceWith(l));
  } else
    e.replaceWith(t);
}
async function be(e) {
  const s = await (await fetch(location.href, {
    method: "POST",
    body: JSON.stringify({
      ...e,
      is_storyblok_preview: !0
    }),
    headers: {
      "Content-Type": "application/json"
    }
  })).text();
  return new DOMParser().parseFromString(s, "text/html").body;
}
function fe(e, t) {
  if (!t)
    return { src: e, attrs: {} };
  let s = 0, n = 0;
  const l = {}, r = [];
  function b(i, u, f, E, L) {
    typeof i != "number" || i <= u || i >= f ? console.warn(`[StoryblokRichText] - ${E.charAt(0).toUpperCase() + E.slice(1)} value must be a number between ${u} and ${f} (inclusive)`) : L.push(`${E}(${i})`);
  }
  if (typeof t == "object") {
    if (typeof t.width == "number" && t.width > 0 ? (l.width = t.width, s = t.width) : console.warn("[StoryblokRichText] - Width value must be a number greater than 0"), t.height && typeof t.height == "number" && t.height > 0 ? (l.height = t.height, n = t.height) : console.warn("[StoryblokRichText] - Height value must be a number greater than 0"), t.loading && ["lazy", "eager"].includes(t.loading) && (l.loading = t.loading), t.class && (l.class = t.class), t.filters) {
      const { filters: i } = t || {}, { blur: u, brightness: f, fill: E, format: L, grayscale: C, quality: $, rotate: T } = i || {};
      u && b(u, 0, 100, "blur", r), $ && b($, 0, 100, "quality", r), f && b(f, 0, 100, "brightness", r), E && r.push(`fill(${E})`), C && r.push("grayscale()"), T && [0, 90, 180, 270].includes(t.filters.rotate || 0) && r.push(`rotate(${T})`), L && ["webp", "png", "jpeg"].includes(L) && r.push(`format(${L})`);
    }
    t.srcset && (l.srcset = t.srcset.map((i) => {
      if (typeof i == "number")
        return `${e}/m/${i}x0/${r.length > 0 ? `filters:${r.join(":")}` : ""} ${i}w`;
      if (Array.isArray(i) && i.length === 2) {
        const [u, f] = i;
        return `${e}/m/${u}x${f}/${r.length > 0 ? `filters:${r.join(":")}` : ""} ${u}w`;
      } else {
        console.warn("[StoryblokRichText] - srcset entry must be a number or a tuple of two numbers");
        return;
      }
    }).join(", ")), t.sizes && (l.sizes = t.sizes.join(", "));
  }
  let p = `${e}/m/`;
  return s > 0 && n > 0 && (p = `${p}${s}x${n}/`), r.length > 0 && (p = `${p}filters:${r.join(":")}`), {
    src: p,
    attrs: l
  };
}
var g = /* @__PURE__ */ ((e) => (e.DOCUMENT = "doc", e.HEADING = "heading", e.PARAGRAPH = "paragraph", e.QUOTE = "blockquote", e.OL_LIST = "ordered_list", e.UL_LIST = "bullet_list", e.LIST_ITEM = "list_item", e.CODE_BLOCK = "code_block", e.HR = "horizontal_rule", e.BR = "hard_break", e.IMAGE = "image", e.EMOJI = "emoji", e.COMPONENT = "blok", e.TABLE = "table", e.TABLE_ROW = "tableRow", e.TABLE_CELL = "tableCell", e.TABLE_HEADER = "tableHeader", e))(g || {}), v = /* @__PURE__ */ ((e) => (e.BOLD = "bold", e.STRONG = "strong", e.STRIKE = "strike", e.UNDERLINE = "underline", e.ITALIC = "italic", e.CODE = "code", e.LINK = "link", e.ANCHOR = "anchor", e.STYLED = "styled", e.SUPERSCRIPT = "superscript", e.SUBSCRIPT = "subscript", e.TEXT_STYLE = "textStyle", e.HIGHLIGHT = "highlight", e))(v || {}), z = /* @__PURE__ */ ((e) => (e.TEXT = "text", e))(z || {}), I = /* @__PURE__ */ ((e) => (e.URL = "url", e.STORY = "story", e.ASSET = "asset", e.EMAIL = "email", e))(I || {});
const ye = [
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
], he = (e = {}) => Object.keys(e).map((t) => `${t}="${e[t]}"`).join(" "), ge = (e = {}) => Object.keys(e).map((t) => `${t}: ${e[t]}`).join("; ");
function ke(e) {
  return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}
const S = (e) => Object.fromEntries(Object.entries(e).filter(([t, s]) => s !== void 0));
function U(e, t = {}, s) {
  const n = he(t), l = n ? `${e} ${n}` : e, r = Array.isArray(s) ? s.join("") : s || "";
  if (e) {
    if (ye.includes(e))
      return `<${l}>`;
  } else return r;
  return `<${l}>${r}</${e}>`;
}
function me(e = {}) {
  const t = /* @__PURE__ */ new Map(), {
    renderFn: s = U,
    textFn: n = ke,
    resolvers: l = {},
    optimizeImages: r = !1,
    keyedResolvers: b = !1
  } = e, p = s !== U, i = (o) => (a, c) => {
    const d = a.attrs || {};
    return c.render(o, d, a.children || null);
  }, u = (o, a) => {
    const { src: c, alt: d, title: y, srcset: m, sizes: h } = o.attrs || {};
    let k = c, w = {};
    if (r) {
      const { src: V, attrs: Q } = fe(c, r);
      k = V, w = Q;
    }
    const Z = {
      src: k,
      alt: d,
      title: y,
      srcset: m,
      sizes: h,
      ...w
    };
    return a.render("img", S(Z));
  }, f = (o, a) => {
    const { level: c, ...d } = o.attrs || {};
    return a.render(`h${c}`, d, o.children);
  }, E = (o, a) => {
    var c, d, y, m;
    const h = a.render("img", {
      src: (c = o.attrs) == null ? void 0 : c.fallbackImage,
      alt: (d = o.attrs) == null ? void 0 : d.alt,
      style: "width: 1.25em; height: 1.25em; vertical-align: text-top",
      draggable: "false",
      loading: "lazy"
    });
    return a.render("span", {
      "data-type": "emoji",
      "data-name": (y = o.attrs) == null ? void 0 : y.name,
      "data-emoji": (m = o.attrs) == null ? void 0 : m.emoji
    }, h);
  }, L = (o, a) => a.render(
    "pre",
    o.attrs || {},
    a.render("code", {}, o.children || "")
  ), C = (o, a = !1) => ({ text: c, attrs: d }, y) => {
    const { class: m, id: h, ...k } = d || {}, w = a ? {
      class: m,
      id: h,
      style: ge(k) || void 0
    } : d || {};
    return y.render(o, S(w), c);
  }, $ = (o) => R(o), T = (o) => {
    const { marks: a, ...c } = o;
    if ("text" in o) {
      if (a)
        return a.reduce(
          (y, m) => $({ ...m, text: y }),
          $({ ...c, children: c.children })
        );
      const d = o.attrs || {};
      if (b) {
        const y = t.get("txt") || 0;
        t.set("txt", y + 1), d.key = `txt-${y}`;
      }
      return n(c.text, d);
    }
    return "";
  }, x = (o, a) => {
    const { linktype: c, href: d, anchor: y, ...m } = o.attrs || {};
    let h = "";
    switch (c) {
      case I.ASSET:
      case I.URL:
        h = d;
        break;
      case I.EMAIL:
        h = `mailto:${d}`;
        break;
      case I.STORY:
        h = d, y && (h = `${h}#${y}`);
        break;
      default:
        h = d;
        break;
    }
    const k = { ...m };
    return h && (k.href = h), a.render("a", k, o.text);
  }, K = (o, a) => {
    var c, d;
    return console.warn("[StoryblokRichtText] - BLOK resolver is not available for vanilla usage"), a.render("span", {
      blok: (c = o == null ? void 0 : o.attrs) == null ? void 0 : c.body[0],
      id: (d = o.attrs) == null ? void 0 : d.id,
      style: "display: none"
    });
  }, J = (o, a) => {
    const c = {}, d = a.render("tbody", {}, o.children);
    return a.render("table", c, d);
  }, W = (o, a) => {
    const c = {};
    return a.render("tr", c, o.children);
  }, Y = (o, a) => {
    const { colspan: c, rowspan: d, colwidth: y, backgroundColor: m, ...h } = o.attrs || {}, k = {
      ...h
    };
    c > 1 && (k.colspan = c), d > 1 && (k.rowspan = d);
    const w = [];
    return y && w.push(`width: ${y}px;`), m && w.push(`background-color: ${m};`), w.length > 0 && (k.style = w.join(" ")), a.render("td", S(k), o.children);
  }, q = (o, a) => {
    const { colspan: c, rowspan: d, colwidth: y, backgroundColor: m, ...h } = o.attrs || {}, k = {
      ...h
    };
    c > 1 && (k.colspan = c), d > 1 && (k.rowspan = d);
    const w = [];
    return y && w.push(`width: ${y}px;`), m && w.push(`background-color: ${m};`), w.length > 0 && (k.style = w.join(" ")), a.render("th", S(k), o.children);
  }, _ = /* @__PURE__ */ new Map([
    [g.DOCUMENT, i("")],
    [g.HEADING, f],
    [g.PARAGRAPH, i("p")],
    [g.UL_LIST, i("ul")],
    [g.OL_LIST, i("ol")],
    [g.LIST_ITEM, i("li")],
    [g.IMAGE, u],
    [g.EMOJI, E],
    [g.CODE_BLOCK, L],
    [g.HR, i("hr")],
    [g.BR, i("br")],
    [g.QUOTE, i("blockquote")],
    [g.COMPONENT, K],
    [z.TEXT, T],
    [v.LINK, x],
    [v.ANCHOR, x],
    [v.STYLED, C("span", !0)],
    [v.BOLD, C("strong")],
    [v.TEXT_STYLE, C("span", !0)],
    [v.ITALIC, C("em")],
    [v.UNDERLINE, C("u")],
    [v.STRIKE, C("s")],
    [v.CODE, C("code")],
    [v.SUPERSCRIPT, C("sup")],
    [v.SUBSCRIPT, C("sub")],
    [v.HIGHLIGHT, C("mark")],
    [g.TABLE, J],
    [g.TABLE_ROW, W],
    [g.TABLE_CELL, Y],
    [g.TABLE_HEADER, q]
  ]), B = new Map([
    ..._,
    ...Object.entries(l).map(([o, a]) => [o, a])
  ]), X = () => ({
    render: (o, a = {}, c) => {
      if (b && o) {
        const d = t.get(o) || 0;
        t.set(o, d + 1), a.key = `${o}-${d}`;
      }
      return s(o, a, c);
    },
    originalResolvers: _,
    mergedResolvers: B
  });
  function A(o) {
    const a = B.get(o.type);
    if (!a)
      return console.error("<Storyblok>", `No resolver found for node type ${o.type}`), "";
    const c = X();
    if (o.type === "text")
      return a(o, c);
    const d = o.content ? o.content.map(R) : void 0;
    return a({
      ...o,
      children: d
    }, c);
  }
  function R(o) {
    return o.type === "doc" ? p ? o.content.map(A) : o.content.map(A).join("") : Array.isArray(o) ? o.map(A) : A(o);
  }
  return {
    render: R
  };
}
let H = !1;
const F = [], we = (e) => new Promise((t, s) => {
  if (typeof window > "u") {
    s(new Error("Cannot load Storyblok bridge: window is undefined (server-side environment)"));
    return;
  }
  if (window.storyblokRegisterEvent = (l) => {
    if (!window.location.search.includes("_storyblok")) {
      console.warn("You are not in Draft Mode or in the Visual Editor.");
      return;
    }
    H ? l() : F.push(l);
  }, document.getElementById("storyblok-javascript-bridge")) {
    t(void 0);
    return;
  }
  const n = document.createElement("script");
  n.async = !0, n.src = e, n.id = "storyblok-javascript-bridge", n.onerror = (l) => s(l), n.onload = (l) => {
    F.forEach((r) => r()), H = !0, t(l);
  }, document.getElementsByTagName("head")[0].appendChild(n);
}), Ie = (e) => {
  if (typeof e != "object" || typeof e._editable > "u")
    return {};
  try {
    const t = JSON.parse(
      e._editable.replace(/^<!--#storyblok#/, "").replace(/-->$/, "")
    );
    return t ? {
      "data-blok-c": JSON.stringify(t),
      "data-blok-uid": `${t.id}-${t.uid}`
    } : {};
  } catch {
    return {};
  }
};
let ve = "https://app.storyblok.com/f/storyblok-v2-latest.js";
function Te(e, t) {
  return me(t).render(e);
}
const Ae = () => we(ve);
export {
  Ee as getLiveStory,
  $e as handleStoryblokMessage,
  Ae as loadStoryblokBridge,
  Te as renderRichText,
  me as richTextResolver,
  Le as storyblok,
  Ie as storyblokEditable,
  P as toCamelCase,
  Ce as useStoryblokApi
};

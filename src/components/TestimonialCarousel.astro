---
interface Testimonial {
  quote: string;
  author: string;
  position: string;
  company: string;
  rating: number;
  image?: string;
}

const testimonials: Testimonial[] = [
  {
    quote: "Jonas Gebäudereinigung reinigt seit 3 Jahren unsere Büroräume. Immer pünktlich, gründlich und zu einem fairen Preis. Das Team ist sehr professionell und freundlich. Absolute Empfehlung!",
    author: "Michael Schmidt",
    position: "Geschäftsführer",
    company: "Schmidt & Partner Rechtsanwälte",
    rating: 5
  },
  {
    quote: "Professionelle Grundreinigung nach unserem Umbau. Das Team war sehr gründlich und hat alles perfekt sauber hinterlassen. Auch die Koordination war reibungslos. Sehr empfehlenswert!",
    author: "Andrea Weber",
    position: "Praxismanagerin",
    company: "Zahnarztpraxis Dr. Weber",
    rating: 5
  },
  {
    quote: "Zuverlässige Fensterreinigung für unser Bürogebäude. Die Fenster sind immer streifenfrei sauber und das Team arbeitet sehr diskret. Preis-Leistung stimmt absolut!",
    author: "Thomas Müller",
    position: "Facility Manager",
    company: "TechnoCenter Oldenburg",
    rating: 5
  },
  {
    quote: "Industriereinigung unserer Produktionshalle - sehr professionell und unter Einhaltung aller Sicherheitsvorschriften. Flexible Terminplanung und faire Preise.",
    author: "Stefan Koch",
    position: "Betriebsleiter",
    company: "MetallTech GmbH",
    rating: 5
  },
  {
    quote: "Notfallreinigung nach einem Wasserschaden - innerhalb von 2 Stunden vor Ort und sofort mit der Schadensbegrenzung begonnen. Professionell und schnell!",
    author: "Julia Hoffmann",
    position: "Objektmanagerin",
    company: "City Center Oldenburg",
    rating: 5
  }
];
---

<div class="testimonial-carousel relative">
  <div class="overflow-hidden">
    <div class="testimonial-slider flex transition-transform duration-500 ease-in-out">
      {testimonials.map((testimonial, index) => (
        <div class="testimonial-slide min-w-full md:min-w-[50%] lg:min-w-[33.333%] p-4">
          <div class="bg-white rounded-xl p-8 shadow-lg h-full flex flex-col">
            <div class="flex items-center mb-4">
              <div class="flex text-yellow-400">
                {Array.from({ length: testimonial.rating }).map(() => (
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                  </svg>
                ))}
              </div>
            </div>
            <p class="text-jonas-gray mb-6 italic flex-grow">{testimonial.quote}</p>
            <div class="flex items-center mt-auto">
              <div class="w-12 h-12 bg-jonas-blue rounded-full flex items-center justify-center text-white font-bold mr-4">
                {testimonial.author.split(' ').map(name => name[0]).join('')}
              </div>
              <div>
                <div class="font-semibold text-jonas-dark-blue">{testimonial.author}</div>
                <div class="text-sm text-jonas-gray">{testimonial.position}, {testimonial.company}</div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <button class="testimonial-prev absolute top-1/2 left-4 transform -translate-y-1/2 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-lg z-10 hover:bg-jonas-blue hover:text-white transition-colors">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
  
  <button class="testimonial-next absolute top-1/2 right-4 transform -translate-y-1/2 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-lg z-10 hover:bg-jonas-blue hover:text-white transition-colors">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
  
  <div class="testimonial-dots flex justify-center mt-6 space-x-2">
    {testimonials.map((_, index) => (
      <button class={`testimonial-dot w-3 h-3 rounded-full ${index === 0 ? 'bg-jonas-blue' : 'bg-gray-300'}`} data-index={index}></button>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const slider = document.querySelector('.testimonial-slider');
    const slides = document.querySelectorAll('.testimonial-slide');
    const prevButton = document.querySelector('.testimonial-prev');
    const nextButton = document.querySelector('.testimonial-next');
    const dots = document.querySelectorAll('.testimonial-dot');
    
    let currentIndex = 0;
    const slideCount = slides.length;
    let slidesPerView = 1;
    
    // Determine slides per view based on screen size
    function updateSlidesPerView() {
      if (window.innerWidth >= 1024) {
        slidesPerView = 3;
      } else if (window.innerWidth >= 768) {
        slidesPerView = 2;
      } else {
        slidesPerView = 1;
      }
    }
    
    function updateSlider() {
      if (!slider) return;
      
      const slideWidth = 100 / slidesPerView;
      slides.forEach(slide => {
        slide.style.minWidth = `${slideWidth}%`;
      });
      
      slider.style.transform = `translateX(-${currentIndex * slideWidth}%)`;
      
      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-jonas-blue');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.remove('bg-jonas-blue');
          dot.classList.add('bg-gray-300');
        }
      });
    }
    
    function nextSlide() {
      if (currentIndex < slideCount - slidesPerView) {
        currentIndex++;
      } else {
        currentIndex = 0;
      }
      updateSlider();
    }
    
    function prevSlide() {
      if (currentIndex > 0) {
        currentIndex--;
      } else {
        currentIndex = slideCount - slidesPerView;
      }
      updateSlider();
    }
    
    // Event listeners
    prevButton?.addEventListener('click', prevSlide);
    nextButton?.addEventListener('click', nextSlide);
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateSlider();
      });
    });
    
    window.addEventListener('resize', () => {
      updateSlidesPerView();
      updateSlider();
    });
    
    // Auto slide
    let autoSlideInterval = setInterval(nextSlide, 5000);
    
    const carousel = document.querySelector('.testimonial-carousel');
    carousel?.addEventListener('mouseenter', () => {
      clearInterval(autoSlideInterval);
    });
    
    carousel?.addEventListener('mouseleave', () => {
      autoSlideInterval = setInterval(nextSlide, 5000);
    });
    
    // Initialize
    updateSlidesPerView();
    updateSlider();
  });
</script>